#!/usr/bin/env python
# -*- coding:utf-8 -*-
# 

import hashlib
import errno
import subprocess
import sys
import os
import re
import stat
import shutil

_casper_config = None
PROGRESS_FILE = '/tmp/deepin-installer/unsquashfs_base_progress'


class InstallError(Exception):
    def __init__ (self,message):
        Exception.__init__(self, message)

def execute(*args):
    """runs args* in shell mode. Output status is taken."""

    try:
        status = subprocess.call(args)
    except IOError:
        return False
    else:
        if status != 0:
            return False
        return True

def find_on_path(command):
    if 'PATH' not in os.environ:
        return False
    path = os.environ['PATH']
    for element in path.split(os.pathsep):
        if not element:
            continue
        filename = os.path.join(element, command)
        if os.path.isfile(filename) and os.access(filename, os.X_OK):
            return True
    return False

def remove_target(source_root, target_root, relpath, st_source):
    """Remove a target file if necessary and if we can.

    On the whole, we can assume that partman-target has arranged to clear
    out the areas of the filesystem we're installing to.  However, in edge
    cases it's possible that there is still some detritus left over, and we
    want to steer a reasonable course between cavalierly destroying data and
    crashing.  So, we remove non-directories and empty directories that are
    in our way, but if a non-empty directory is in our way then we move it
    aside (adding .bak suffixes until we find something unused) instead.
    """
    targetpath = os.path.join(target_root, relpath)
    try:
        st_target = os.lstat(targetpath)
    except OSError:
        # The target does not exist.  Boring.
        return

    if stat.S_ISDIR(st_source.st_mode) and stat.S_ISDIR(st_target.st_mode):
        # One directory is as good as another, so we don't need to remove an
        # existing directory just in order to create another one.
        return

    if not stat.S_ISDIR(st_target.st_mode):
        # Installing over a non-directory is easy; just remove it.
        try:
            os.unlink(targetpath)
        except OSError:
            pass
        return

    try:
        # Is it an empty directory?  That's easy too.
        os.rmdir(targetpath)
        return
    except OSError as e:
        if e.errno not in (errno.ENOTEMPTY, errno.EEXIST):
            raise 

    # If we've got this far, then we must be trying to install a
    # non-directory over an existing non-empty directory.  The slightly
    # easier case is if it's a symlink, and if the prospective symlink
    # target hasn't been copied yet or is empty; in that case, we should try
    # to move the existing directory to the symlink target.
    if stat.S_ISLNK(st_source.st_mode):
        sourcepath = os.path.join(source_root, relpath)
        linkto = os.path.join(
            os.path.dirname(relpath), os.readlink(sourcepath))
        if linkto.startswith('/'):
            linkto = linkto[1:]
        linktarget = os.path.join(target_root, linkto)
        try:
            os.rmdir(linktarget)
        except OSError:
            pass
        if not os.path.exists(linktarget):
            try:
                os.makedirs(os.path.dirname(linktarget))
            except OSError as e:
                if e.errno != errno.EEXIST:
                    raise
            shutil.move(targetpath, linktarget)
            return

    # We're installing a non-directory over an existing non-empty directory,
    # and we have no better strategy.  Move the existing directory to a
    # backup location.
    backuppath = targetpath + '.bak'
    while True:
        if not os.path.exists(backuppath):
            os.rename(targetpath, backuppath)
            break
        else:
            backuppath = backuppath + '.bak'

def copy_file( sourcepath, targetpath, md5_check):
    while True:
        if md5_check:
            sourcehash = hashlib.md5()
        with open(sourcepath, 'rb') as sourcefh:
            with open(targetpath, 'wb') as targetfh:
                while True:
                    buf = sourcefh.read(16 * 1024)
                    if not buf:
                        break
                    targetfh.write(buf)
                    if md5_check:
                        sourcehash.update(buf)
        if not md5_check:
            break

        with open(targetpath, 'rb') as targetfh:
            if md5_check:
                targethash = hashlib.md5()
            while True:
                buf = targetfh.read(16 * 1024)
                if not buf:
                    break
                targethash.udpate(buf)

            if targethash.digest() != sourcehash.digest():
                sys.exit(3)
            else:
                break

def get_casper(key, default=None):
    global _casper_config
    if _casper_config is None:
        _casper_config = {}
    try:
        with open('/etc/casper.conf', 'r') as fp:
            for line in fp:
                if line.startswith('#'):
                    continue
                if line.startswith('export '):
                    line=line[6:]
                line = line.strip()
                bits = line.split('=', 1)
                if len(bits) > 1:
                    _casper_config[bits[0]] = bits[1].strip('"')
    except IOError:
        sys.exit(3)
    return _casper_config.get(key, default)

class Install:
    def __init__(self, lang='en_US', live="casper"):
        self.target = '/target'
        if live == "casper":
            self.casper_path = os.path.join('/cdrom', get_casper('LIVE_MEDIA_PATH','casper').lstrip('/'))
        if live == "live":
            self.casper_path = "/lib/live/mount/medium/live"

        self.lang = lang

        if not os.path.exists('/var/lib/deepin-installer'):
            os.makdirs('/var/lib/deepin-installer')

        self.source = '/var/lib/deepin-installer/source'
        with open('/proc/cmdline') as fp:
            for line in fp:
                if 'locale=%s' % lang.lower() in line.lower():
                    if os.path.isdir('/rofs'):
                        self.source = '/rofs'
        print("Detect source folder %s" % self.source)

        assert os.path.ismount(self.target), 'Failed to mount target: %s' % str(self.target)

    def mount_squashfs_image(self, sqfsfile, mountpoint=None):
        dev = '' 
        sysloops = sorted([x for x in os.listdir('/sys/block') if x.startswith('loop')])
        for sysloop in sysloops:
            try:
                with open(os.path.join('/sys/block', sysloop, 'size')) as sysloopf:
                    sysloopsize = sysloopf.readline().strip()
                if sysloopsize == '0':
                    if find_on_path('udevadm'):
                        udevinfo_cmd = ['udevadm', 'info']
                    else:
                        udevinfo_cmd = ['udevinfo']
                    udevinfo_cmd.extend(['-q','name','-p', os.path.join('/block',sysloop)])
                    with open('/dev/null') as devnull:
                        udevinfo = subprocess.Popen(udevinfo_cmd, stdout=subprocess.PIPE, stderr=devnull, universal_newlines=True)
                    devbase = udevinfo.communicate()[0].strip()
                    if udevinfo.returncode != 0:
                        devbase=sysloop
                    dev = '/dev/%s' % devbase
                    break
            except:
                continue
    
        if dev == '':
            raise  InstallError("No loop device available for %s" % sqfsfile)
    
        execute('losetup', dev, sqfsfile)
        if mountpoint is None:
            mountpoint = '/var/lib/deepin-installer/%s' % sysloop
        if not os.path.isdir(mountpoint):
            os.mkdir(mountpoint)
        if not execute('mount',dev, mountpoint):
            execute('losetup', '-d', dev)
            execute('mount','-o','loop', sqfsfile, mountpoint)
            dev='unused'
        return (dev,mountpoint)

    def mount_source(self):
        self.devs = []
        self.mountpoints = []

        if not os.path.isdir(self.source):
            os.mkdir(self.source)
        sqfsfiles = [ 'filesystem.squashfs' ]

        preseed_file = os.path.join(self.casper_path, "%s.list" % self.lang)
        if not os.path.exists(os.path.join(self.casper_path, "%s.list" % self.lang)):
            preseed_file = os.path.join(self.casper_path, "en_US.list")
        if os.path.exists(preseed_file):
            with open(os.path.join(self.casper_path, "%s.list" % self.lang)) as fp:
                for line in fp:
                    if line.startswith('#'):
                        continue
                    line = line.strip()
                    if not line in sqfsfiles:
                        sqfsfiles.append(line)

        if len(sqfsfiles) == 1:
            sqfsfilepath = os.path.join(self.casper_path, sqfsfiles[0])
            if not os.path.isfile(sqfsfilepath):
                raise InstallError("Preseeded filesystem image %s not found" % sqfsfiles[0])
            dev,mountpoint = self.mount_squashfs_image(sqfsfilepath, self.source)
            self.devs.append(dev)
            self.mountpoints.append(self.source)
            return

        for sqfsfile in sqfsfiles:
            sqfsfilepath = os.path.join(self.casper_path, sqfsfile)
            if sqfsfile != '' and os.path.isfile(sqfsfilepath):
                dev, mountpoint = self.mount_squashfs_image(sqfsfilepath)
                self.devs.append(dev)
                self.mountpoints.append(mountpoint)

        assert self.devs
        assert self.mountpoints

        #execute('mount', '-t', 'unionfs', '-o', 'dirs='
        #        + ':'.join(['%s=ro' % x for x in self.mountpoints]), 'unionfs', self.source)
        # Used unionfs-fuse, why mount unionfs won't work?
        execute('unionfs-fuse', '-o', 'allow_other,use_ino,suid,dev,nonempty', ':'.join(['%s=RO' % x for x in self.mountpoints]), self.source)
        self.mountpoints.append(self.source)

    def copy_all(self, md5_check=False):

        #if find_on_path('rsync'):
        #    self.copy_method_rsync()
        #    return 
        self.copy_method_native(md5_check)

    def copy_method_rsync(self):
        # Be careful with the blank
        if not self.source.endswith('/'):
            cmd = 'rsync -avz --progress --no-inc-recursive ' + self.source + '/'  + ' ' + self.target
        else:
            cmd = 'rsync -avz --progress --no-inc-recursive ' + self.source + ' ' + self.target

        proc = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,)
        fixed_progress = 0
        progress = 0
        progress_file = open(PROGRESS_FILE, 'w')
        while True:
            output = proc.stdout.readline()
            if 'to-chk' in output:
                m = re.findall(r'to-chk=(\d+)/(\d+)', output)
                progress = (100*(int(m[0][1]) - int(m[0][0]))/int(m[0][1]))
                if int(m[0][0]) == 0:
                    break
            # Ensure to break while loop
            if 'total size' in output:
                break
            if fixed_progress < progress:
                fixed_progress = progress
            progress_file.seek(0)
            progress_file.write(str(fixed_progress))
            progress_file.truncate()
            #sys.stdout.write('\rDone: '+str(fixed_progress) +'%')
            #sys.stdout.flush()
        progress_file.close()
        print('\rFinished')

    def copy_method_native(self, md5_check=False):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(self.source):
            for name in dirnames + filenames:
                fqpath = os.path.join(dirpath, name)
                total_size += os.lstat(fqpath).st_size

        copied_size = 0
        progress_file = open(PROGRESS_FILE, 'w')
        old_umask = os.umask(0)
        for dirpath, dirname, filenames in os.walk(self.source):
            sp = dirpath[len(self.source) + 1:]
            for name in dirname + filenames:
                relpath = os.path.join(sp, name)

                if relpath in ("etc/fstab", "etc/crypttab"):
                    continue
                sourcepath = os.path.join(self.source, relpath)
                targetpath = os.path.join(self.target, relpath)
                st = os.lstat(sourcepath)

                remove_target(self.source, self.target, relpath, st)
                mode = stat.S_IMODE(st.st_mode)
                if stat.S_ISLNK(st.st_mode):
                    linkto = os.readlink(sourcepath)
                    os.symlink(linkto, targetpath)
                elif stat.S_ISDIR(st.st_mode):
                    if not os.path.isdir(targetpath):
                        try:
                            os.mkdir(targetpath, mode)
                        except OSError as e:
                            if e.errno != errno.EEXIST:
                                raise
                elif stat.S_ISCHR(st.st_mode):
                    os.mknod(targetpath, stat.S_IFCHR | mode, st.st_rdev)
                elif stat.S_ISBLK(st.st_mode):
                    os.mknod(targetpath, stat.S_IFBLK | mode, st.st_rdev)
                elif stat.S_ISFIFO(st.st_mode):
                    os.mknod(targetpath, stat.S_IFIFO | mode)
                elif stat.S_ISSOCK(st.st_mode):
                    os.mknod(targetpath, stat.S_IFSOCK | mode)
                elif stat.S_ISREG(st.st_mode):
                    copy_file( sourcepath, targetpath, md5_check)

                # Copy metadata.
                copied_size += st.st_size
                os.lchown(targetpath, st.st_uid, st.st_gid)
                if not stat.S_ISLNK(st.st_mode):
                    os.chmod(targetpath, mode)
                if (hasattr(os, "listxattr") and
                        hasattr(os, "supports_follow_symlinks") and
                        os.supports_follow_symlinks):
                    try:
                        attrnames = os.listxattr(
                            sourcepath, follow_symlinks=False)
                        for attrname in attrnames:
                            attrvalue = os.getxattr(
                                sourcepath, attrname, follow_symlinks=False)
                            os.setxattr(
                                targetpath, attrname, attrvalue,
                                follow_symlinks=False)
                    except OSError as e:
                        if e.errno not in (
                                errno.EPERM, errno.ENOTSUP, errno.ENODATA):
                            raise

                progress = int(100*copied_size/total_size)
                progress_file.seek(0)
                progress_file.write(str(progress))
                progress_file.truncate()
                #sys.stdout.write('\rDone: '+str(progress) +'%')
                #sys.stdout.flush()
        progress_file.close()
        os.umask(old_umask)


    def umount_source(self):
        execute('sync')
        devs= self.devs
        devs.reverse()

        mountpoints = self.mountpoints
        mountpoints.reverse()

        for mountpoint in mountpoints:
            if not execute('umount', '-vl', mountpoint):
                raise InstallError("Failed to umount %s" % mountpoint)
        for dev in devs:
            if (dev != '' and dev != 'unused' and not execute('losetup', '-d', dev)):
                raise InstallError("Failed to detach loopback device %s" % dev)

    def run(self):
        if self.source == '/var/lib/deepin-installer/source':
            self.mount_source()

        try:
            self.copy_all()
        except: 
            raise InstallError("Copy file failed, Install failed")

        if self.source == '/var/lib/deepin-installer/source':
            self.umount_source()

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--lang', default="en_US",type=str)
    parser.add_argument('--live', default="casper",type=str)
    args = parser.parse_args()
    if not os.path.exists(os.path.dirname(PROGRESS_FILE)):
        os.makedirs(os.path.dirname(PROGRESS_FILE))
    if not os.path.exists('/var/lib/deepin-installer'):
        os.makedirs('/var/lib/deepin-installer')
    install = Install(lang=args.lang,live=args.live)
    install.run()
    sys.exit(0)
