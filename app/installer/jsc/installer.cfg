Class("Installer",
       Description("installer"),

       Function("emit_webview_ok", Null()),

       Function("spawn_command_sync", Null(),
           String("cmd", "The cmd"),Boolean()
       ),

       Function("restart_installer", Null()),

       Function("finish_install", Null()),

       Function("finish_reboot", Null()),

       Function("shutdown", Null()),
       #base
       Function("get_memory_size", Number("size", "memory size")),

       Function("get_keycode_from_keysym", Number("keycode", "keycode"),
            Number("keysym", "keysym"),
       ),

       Function("detect_capslock", Boolean("capslock", "whether capslock is on")),

       #account
       Function("get_system_users", JSValueRef("users", "system users")),

       #keyboard
       Function("get_layout_description", String("desc", "description of layout"),
            String("layout", "combine layout name and variant name"),
       ),

       Function("get_keyboard_layouts", JSValueRef("layouts", "keyboard layouts")),

       Function("get_layout_variants", JSValueRef("layout_variants", "keyboard layout variants"),
            String("name", "layout name"),
       ),

       Function("get_current_layout_variant", JSValueRef("current", "current layout variant")),

       Function("keyboard_detect_read_step", Number("step", "next step"),
            String("step", "input step"),
       ),

       Function("keyboard_detect_get_symbols", JSValueRef("symbols", "list of symbols")),

       Function("keyboard_detect_get_present", String("present", "present step")),

       Function("keyboard_detect_get_not_present", String("not present", "not present step")),

       Function("keyboard_detect_get_keycodes", JSValueRef("keycodes", "keycodes")),

       Function("keyboard_detect_get_result", String("result", "result layout")),

       #timezone
       Function("get_timezone_list", JSValueRef("timezones", "list of system timezones")),

       #locale
       Function("get_current_locale", String("locale", "current locale")),

       Function("show_log", Null()),


       #part
       Function("rand_uuid", String("uuid", "uuid"),
	    String("p", "pefix of the be generated uuid"),
       ),

       Function("list_disks", JSValueRef("disks", "disk uuids")),

       Function("get_disk_path", String("path", "path of the spec disk"), 
           String("disk", "disk uuid"),
       ),

       Function("get_disk_type", String("type", "type of the spec disk"), 
           String("disk", "disk uuid"),
       ),

       Function("get_disk_model", String("model", "model of the spec disk"), 
           String("disk", "disk uuid"),
       ),

       Function("get_disk_max_primary_count", Number("count", "max primary count of the spec disk"), 
           String("disk", "disk uuid"),
       ),

       Function("get_disk_size", Number("s", "size of the spec disk by unit Byte"), 
           String("disk", "disk uuid"),
       ),

       Function("get_disk_partitions", JSValueRef("partitions", "partition uuids"),
           String("disk", "disk uuid"),
       ),

       Function("disk_is_gpt", Boolean("r", "whether the disk label is gpt"),
           String("disk", "disk uuid"), 
       ),
       Function("system_support_efi", Boolean("uefi", "whether support uefi")),

       Function("get_partition_type", String("type", "type of the spec partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_name", String("name", "name of the spec partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_path", String("path", "path of the partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_mp", String("mp", "mount point of the partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_start", Number("start", "start of the spec partition by unit Byte"), 
           String("partition", "partition uuid"),
       ),

       Function("get_partition_size", Number("size", "size of the spec partition by unit Byte"), 
           String("partition", "partition uuid"),
       ),

       Function("get_partition_end", Number("end", "end of the spec partition by unit Byte"), 
           String("partition", "partition uuid"),
       ),

       Function("get_partition_fs", String("fs", "filesystem of the spec partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_label", String("label", "label of the spec partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_flag", Boolean("status", "status of the partition flag"),
           String("partition", "partition uuid"), String("flag", "flag of the partition"),
       ),

       Function("is_partition_busy", Boolean("busy", "is partition busy"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_free", Null(),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_os", String("os", "current os lived in the partition"),
           String("partition", "partition uuid"),
       ),

       Function("get_partition_os_desc", String("desc", "os desc lived in the partition"),
           String("partition", "partition uuid"),
       ),

       Function("new_disk_partition", Boolean("ret", "create partition succeed or failed"),
           String("part", "part uuid"), String("disk", "disk uuid"), String("type", "partition type"), String("fs", "partition fs"),
           Number("start", "partition geom start"), Number("end", "partition geom end"),
       ),

       Function("delete_disk_partition", Boolean("ret", "delete partition succeed or failed"),
            String("partition", "partition uuid"),
       ),

       Function("update_partition_geometry", Boolean("ret", "update partition geometry succeed or failed"),
           String("partition", "partition uuid"), Number("start", "geometry start"), Number("size", "geometry size"),
       ),

       Function("update_partition_fs", Boolean("ret", "update partition fs succeed or failed"),
           String("partition", "partition uuid"), String("fs", "filesystem name"),
       ),

       Function("set_partition_flag", Boolean("ret", "set partition flag succeed or failed"), 
           String("partition", "partition uuid"), String("flag", "flag of the partition"), Boolean("status", "status of the flag"),
       ),

       Function("write_disk", Boolean("ret", "write disk succeed or failed"),
           String("disk", "disk uuid"),
       ),

       Function("unmount_partition", Null(),
           String("partition", "partition uuid"),
       ),

       #new API 
       Function("start_install", Null()),

       Function("record_keyboard_layout_info", Null(),
            String("layout", "layout name"), String("variant", "variant name"),
       ),
       Function("record_locale_info", Null(),
            String("locale", "default locale"), 
       ),
       Function("record_timezone_info", Null(),
             String("timezone", "timezone name"),
       ),
       Function("record_mountpoint_info", Null(),
	String("part", "part uuid"), String("mp", "mount point"),
       ),
       Function("record_root_disk_info", Null(),
	String("disk", "the disk which rootfs resident"),
       ),
       Function("record_accounts_info", Null(),
           String("username", "username"), String("hostname", "hostname"), String("password", "password"),
       ),
       Function("record_bootloader_info", Null(),
           String("uuid", "part uuid or disk uuid"), Boolean("uefi", "whether in uefi mode"),
       ),
       Function("record_simple_mode_info", Null(),
           Boolean("s", "whehter simple mode"),
       ),
       Function("set_layout", Null(),
           String("layout", "keyboard layout key"),
       ),
       Function("get_timezone_utc", String("utc", "the utc timezone"),
           String("timezone", "the timezone of local city"),
       ),
       Function("get_timezone_local", String("tz", "the timezone of /etc/timezone")),
       Function("is_debug", Boolean()),
)
